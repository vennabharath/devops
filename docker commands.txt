docker create 	creates a container but does not start it.
docker rename 	allows the container to be renamed.
docker run 	creates and starts a container in one operation.
docker rm	 deletes a container.
docker update 	updates a container's resource limits.

If you want to map a directory on the host to a docker container, 

docker run -v $HOSTDIR:$DOCKERDIR

If you want to remove also the volumes associated with the container, 
the deletion of the container must include the -v switch like in 

docker rm -v

There's also a logging driver available for individual containers in docker 1.10. 
To run docker with a custom log driver (i.e., to syslog), use docker run --log-driver=syslog

docker run --name yourname docker_image 
because when you specify the --name inside the run command this will
allow you to start and stop a container by calling it with the name the you 
specified when you created it.

Starting and Stopping
docker start 	starts a container so it is running.
docker stop 	stops a running container.
docker restart 	stops and starts a container.
docker pause 	pauses a running container, "freezing" it in place.
docker unpause 	will unpause a running container.
docker wait 	blocks until running container stops.
docker kill	 sends a SIGKILL to a running container.

We most commonly used command is the docker run <image> command.
 It downloads the image if it's not already in our local machine and 
starts the container once the image is ready.

docker create: creates a writable container layer over the specified
 image and prepares it for running the specified command. 
The container ID is then printed to STDOUT. 

This is similar to docker run -d except the container is never started. 
We can then use the docker start <container_id> command to start the 
container at any point.

$ docker create -t -i fedora bash
...
dff32a272ad4c94cd51419ee4f53c371e3c3a8cfb448a469634d4420e139d118

$ docker start -a -i dff32a272ad4c
[root@dff32a272ad4 /]# 
i: interactive, keep STDIN open even if not attached
t: Allocate a pseudo-TTY

docker run creates and starts a container in one operation.
$ docker run -it ubuntu-ssh-k /bin/bash

docker rm deletes a container.
$ docker rm myfedora

docker update updates a container's resource limits.
 Example : updating multiple resource configurations for multiple containers:
$ docker update --cpu-shares 512 -m 300M dff32a272ad4

Container info
docker ps shows running containers.
$ docker ps 
CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS               NAMES
e2481c1bad5d        ubuntu-ssh-k:latest   "/bin/bash"         10 hours ago        Up 10 hours                             hopeful_carson 

docker logs gets logs from container. (We can use a custom log driver, but logs is only available for json-file and journald in 1.10)
$ docker logs 839f66a78983

docker inspect looks at all the info on a container (including IP address).
To get an IP address of a running container:
$ docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)
172.17.0.5

docker events gets events from container.
docker port shows public facing port of container.
docker top shows running processes in container.
docker stats shows containers' resource usage statistics.
docker diff shows changed files in the container's FS.

Image create/remove
docker images : shows all images.
docker import : creates an image from a tarball.
docker build : creates image from Dockerfile.
docker commit : creates image from a container, by default, the container being committed and its processes will be paused while the image is committed. This reduces the likelihood of encountering data corruption during the process of creating the commit. As an example, let's install nginx to the ubuntu container:

$ docker run -it ubuntu /bin/bash
root@bf5d24821dfa:/# apt-get update
root@bf5d24821dfa:/# apt-get install nginx

While the container is running, on another terminal, we can commit the change to another image:

$ docker ps
CONTAINER ID        IMAGE               COMMAND             
bf5d24821dfa        ubuntu              "/bin/bash"  

$ docker commit bf5d24821dfa ubuntu-nginx

$ docker images
REPOSITORY       TAG                 IMAGE ID            
ubuntu-nginx     latest              91cc8b745f5e 

$ docker run -it ubuntu-nginx
root@9644a814e95a:/#

$ docker ps
CONTAINER ID        IMAGE               COMMAND            
9644a814e95a        ubuntu-nginx        "/bin/bash"       
bf5d24821dfa        ubuntu              "/bin/bash"       

Note the the new container dit not start "nginx" server. 
So, we can commit a container with new CMD and EXPOSE instructions:

root@9644a814e95a:/# exit

$ docker commit -m 'added nginx start' --change='CMD ["nginx", "-g daemon off;"]' -c "EXPOSE 80" 9644a814e95a ubuntu-nginx:version2


-m 'added nginx start' creates a comment for this commit.
--change='CMD ... is changing the CMD command, which is what
 the image will run when it is first started up. In this example, 

we are telling the image to run nginx in the foreground. 
Most base os images have CMD set to bash so we can interact
 with the os when attaching.
We used "EXPOSE" to get the port exposed to the host.
"9644a814e95a" is the name of the container we want to commit from.
"ubuntu-nginx:version2" is our name for the new image.
 We appended version to the name of the container.

We can now view our new image with the following command:

$ docker images
REPOSITORY         TAG                 IMAGE ID            
ubuntu-nginx       version2            61918a284221

Run the new image:

$ docker run -idt ubuntu-nginx:version2

$ ps aux | grep -v grep |grep nginx
root     12546  0.0  0.2 124972  9560 pts/25   Ss+  10:21   0:00 nginx: master process nginx -g daemon off;
www-data 12565  0.0  0.0 125332  3040 pts/25   S+   10:21   0:00 nginx: worker process
www-data 12566  0.0  0.0 125332  3040 pts/25   S+   10:21   0:00 nginx: worker process

$ docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)
172.17.0.2


Memory Constraints
You can also set memory constraints on Docker:

docker run -it -m 300M ubuntu:14.04 /bin/bash

Capabilities
Linux capabilities can be set by using cap-add and cap-drop. See https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities for details. This should be used for greater security.

To mount a FUSE based filesystem, you need to combine both --cap-add and --device:

docker run --rm -it --cap-add SYS_ADMIN --device /dev/fuse sshfs
Give access to a single device:

docker run -it --device=/dev/ttyUSB0 debian bash
Give access to all devices:

docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb debian bash

Info
docker ps shows running containers.
docker logs gets logs from container. (You can use a custom log driver, but logs is 
only available for json-file and journald in 1.10).

docker inspect looks at all the info on a container (including IP address).
docker events gets events from container.
docker port shows public facing port of container.
docker top shows running processes in container.
docker stats shows containers' resource usage statistics.
docker diff shows changed files in the container's FS.
docker ps -a shows running and stopped containers.

docker stats --all shows a list of all containers, default shows just running.

docker cp copies files or folders between a container and the local filesystem.
docker export turns container filesystem into tarball archive stream to STDOUT.

docker exec to execute a command in container.
To enter a running container, attach a new shell process to a running container called foo, 
use: docker exec -it foo /bin/bash.


Images are just templates for docker containers.

Lifecycle
docker images shows all images.
docker import creates an image from a tarball.
docker build creates image from Dockerfile.
docker commit creates image from a container, pausing it temporarily if it is running.
docker rmi removes an image.

Networks
Docker has a networks feature. Docker automatically creates 3 network interfaces
 when you install it (bridge, host none).

 A new container is launched into the bridge network by default. 
To enable communication between multiple containers, you can create a
 new network and launch containers in it. This enables containers to 
communicate to each other while being isolated from containers that are
 not connected to the network. Furthermore, it allows to map container names to their IP addresses

Lifecycle
docker network create NAME Create a new network (default type: bridge).
docker network rm NAME Remove one or more networks by name or identifier. No containers can be connected to the network when deleting it.
Info
docker network ls List networks
docker network inspect NAME Display detailed information on one or more networks.
Connection
docker network connect NETWORK CONTAINER Connect a container to a network
docker network disconnect NETWORK CONTAINER Disconnect a container from a network
You can specify a specific IP address for a container:

# create a new bridge network with your subnet and gateway for your ip block
docker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic

# run a nginx container with a specific ip in that block
$ docker run --rm -it --net iptastic --ip 203.0.113.2 nginx

# curl the ip from any other place (assuming this is a public ip block duh)
$ curl 203.0.113.2


